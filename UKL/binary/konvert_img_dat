#!/usr/bin/env bash
myk() {
  read b
  if [ "$b" -le "7" ]; then
    echo ".....$convert_to "$file".br...$waiting..."
    brotli -"$b"f ./"$file"
    echo
  else
    echo
    echo ".....$enter_number $from 0 $to1 7:"
    myk
    echo
  fi
  if [ $(echo $?) -eq 0 ]; then
    #echo
    echo ".....$convert_to .br $successfully_completed!"
    echo "$print_size_out"
    echo "$print_size_free"
    #echo
    rm -f "$file"
  else
    #echo
    echo ".....$convert_error_in $in1 .br!"
    echo
  fi
  return
}

br_conv() {
  if [ -f ./"$file" ]; then
    echo
    echo ".....$convert_to .br..."
    echo ".....$enter_compression_ratio_0_7:"
    myk
  else
    echo
    echo ".....$in_folder_no "$file"."
    echo
  fi
  return
}

r="$(basename $file)"
img_name=${r%.*}

if [ -f ./"$file" ]; then
  if [ ! -z "$(hexdump -C -n 4 ./"$file" | grep '3a ff 26 ed')" ]; then
    if test -s "$file"; then
      f_name="$(echo "$file" | awk -F"." '{ print $1 }')"
      size_out="$(hexdump -C -n 50 "$file" | awk '{if($1==00000000) {b="0x"$17$16$15$14}} {if($1==00000010) {a="0x"$5$4$3$2}}
END {print a*b}')"

      print_size_out="$(echo ".....$size1 raw == $size_out $byte")"

      dd if="$file" ibs=1 skip=40 of="$f_name".size.img bs=1 count=65536 &>/dev/null
      size_free="$(expr "$($binary_dir/tune2fs -l "$f_name".size.img 2>/dev/null | awk '/Free blocks:/ { print $3 }')" \* 4096 / 1024 / 1024 2>/dev/null)"
      if [ $(echo $?) -eq 0 ]; then

        print_size_free=$(echo ".....$free_space: $size_free mb")
      else
        print_size_free=$(echo ".....$free_space: $not_defined")
      fi
    fi

    echo
    echo ".....$converting "$file" -> "$img_name".new.dat..."
    echo
    echo ".....$enter_number_version_android_for_built:"
    echo
    python3 $binary_dir/bin_system/img2sdat-master/img2sdat.py ./"$file"
    if [ $(echo $?) -eq 0 ]; then
      echo
      echo ".....$convert_to .dat $successfully_completed!"
      #echo
      if [ "$br_check" == "true" ]; then
        file=./"$img_name".new.dat
        br_conv
      else
        echo "$print_size_out"
        echo "$print_size_free"
      #echo
      fi
    else
      echo
      echo ".....$convert_error_in .dat!"
      echo
    fi

  elif [ ! -z "$(hexdump -C -n 2000 "$file" | awk '/00000430/ { print $10$11 }' | grep "53ef")" -o ! -z "$(hexdump -C -n 20000 "$file" | grep -o "30 50 4c 41")" -o ! -z "$(hexdump -C -n 2000 "$file" | awk '/00000400/ { print $2$3$4$5 }' | grep -o "e2e1f5e0")" ]; then

    if test -s "$file"; then
      size_out="$(stat -c %s "$file")"
      print_size_out="$(echo ".....$size1 raw == $size_out $byte")"
      size_free="$(expr "$($binary_dir/tune2fs -l "$file" 2>/dev/null | awk '/Free blocks:/ { print $3 }')" \* 4096 / 1024 / 1024 2>/dev/null)"
      if [ $(echo $?) -eq 0 ]; then

        print_size_free=$(echo ".....$free_space: $size_free mb")
      else
        print_size_free=$(echo ".....$free_space: $not_defined")
      fi
    fi
    echo
    echo ".....$converting "$img_name".img -> "$img_name".sparse.img..."
    #echo
    $binary_dir/img2simg ./"$file" ./"$img_name".sparse.img 2>/dev/nul
    if [ $(echo $?) -eq 0 ]; then
      echo
      echo ".....$convert_to sparse $successfully_completed!"
      echo

      if [ ! -z "$(hexdump -C -n 4 ./"$img_name".sparse.img | grep '3a ff 26 ed')" ]; then
        #clear
        echo
        echo ".....$converting "$img_name".sparse.img -> "$img_name".new.dat..."
        echo
        echo ".....$enter_number_version_android_for_built:"
        echo
        python3 $binary_dir/bin_system/img2sdat-master/img2sdat.py ./"$img_name".sparse.img
        if [ $(echo $?) -eq 0 ]; then

          mv -f ./"$img_name".sparse.new.dat ./"$img_name".new.dat
          mv -f ./"$img_name".sparse.patch.dat ./"$img_name".patch.dat
          mv -f ./"$img_name".sparse.transfer.list ./"$img_name".transfer.list
          echo
          echo ".....$convert_to .dat $successfully_completed!"
          #echo
          if [ "$br_check" == "true" ]; then
            file=./"$img_name".new.dat
            br_conv
          else
            echo "$print_size_out"
            echo "$print_size_free"
          #echo
          fi
        else
          echo
          echo ".....$convert_error_in .dat!"
          echo
        fi
      else
        echo
        echo ".....$convert_error_in sparse!"
        echo
      fi

    else
      echo
      echo ".....$converting "$file" $not_supported!"
      echo
    fi
  fi
else
  echo
  echo ".....$no_image_in_folder \""$file"\" $for_conversion"
fi
rm -f $local_dir/python/tmp* tmp* "$img_name".sparse.img

unset size_out
unset size_free
unset print_size_free
unset print_size_out
rm -f "$f_name".size.img
